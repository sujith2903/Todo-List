(()=>{"use strict";function e(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function t(e){return t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},t(e)}function n(n){e(1,arguments);var r=Object.prototype.toString.call(n);return n instanceof Date||"object"===t(n)&&"[object Date]"===r?new Date(n.getTime()):"number"==typeof n||"[object Number]"===r?new Date(n):("string"!=typeof n&&"[object String]"!==r||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function r(t){e(1,arguments);var r=n(t);return r.setHours(0,0,0,0),r}function o(t){return e(1,arguments),function(t,n){e(2,arguments);var o=r(t),i=r(n);return o.getTime()===i.getTime()}(t,Date.now())}var i={};function c(){return i}function s(t,r){var o,i,s,a,l,d,u,y;e(1,arguments);var p=c(),m=function(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}(null!==(o=null!==(i=null!==(s=null!==(a=null==r?void 0:r.weekStartsOn)&&void 0!==a?a:null==r||null===(l=r.locale)||void 0===l||null===(d=l.options)||void 0===d?void 0:d.weekStartsOn)&&void 0!==s?s:p.weekStartsOn)&&void 0!==i?i:null===(u=p.locale)||void 0===u||null===(y=u.options)||void 0===y?void 0:y.weekStartsOn)&&void 0!==o?o:0);if(!(m>=0&&m<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var v=n(t),f=v.getDay(),h=(f<m?7:0)+f-m;return v.setDate(v.getDate()-h),v.setHours(0,0,0,0),v}function a(t,n){return e(1,arguments),function(t,n,r){e(2,arguments);var o=s(t,r),i=s(n,r);return o.getTime()===i.getTime()}(t,Date.now(),n)}const l=function(){let e,t,n,r,i=0;const c=document.querySelector(".projects-lists"),s=document.querySelector(".main-content"),l=document.querySelector(".due-content"),d=document.querySelector(".project-title"),y=document.querySelector(".project-description"),p=document.querySelector(".project-due"),m=document.querySelector(".priority"),v=document.querySelector(".task-button"),f=document.querySelector(".all-tasks"),h=document.querySelector(".due-today"),g=document.querySelector(".due-this-week"),k=document.querySelector(".due-title"),L=document.querySelector(".due-projects-lists"),j=document.querySelector(".priority-tab"),S=function(e){u.myProjectArray[e]===t&&(s.style.display="none"),u.myProjectArray.splice(e,1)},C=function(){const e=document.createElement("div");e.classList.add("individual-task"),f.appendChild(e);const t=document.createElement("div");t.classList.add("task-checkbox-div"),e.appendChild(t),t.innerHTML='<label for="task1-checkbox"></label><input type="checkbox" class = "task-checkbox" id="task1-checkbox" name="checkbox">';const n=document.createElement("div");n.classList.add("task-input-div"),e.appendChild(n),n.innerHTML='<label for="task1-input"></label><input type="text" class="task-input" id="task1-input" name="task" required>';const r=document.createElement("div");r.classList.add("task-delete-button"),e.appendChild(r),r.innerHTML='<svg class="deleteSVG" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path class="deleteSVG" d="M19,4H15.5L14.5,3H9.5L8.5,4H5V6H19M6,19A2,2 0 0,0 8,21H16A2,2 0 0,0 18,19V7H6V19Z" /></svg>'},w=function(e,t){return null==t&&(t=!1),{taskName:e,isCompleted:t}},b=function(e){for(s.style.display="none",l.style.display="flex";L.hasChildNodes();)L.removeChild(L.firstChild);for(let t=0;t<u.myProjectArray.length;t++){let n=new Date(`${u.myProjectArray[t].date}CDT`);if("isToday"==e){if(k.textContent="Due Today",o(new Date(n))){const e=document.createElement("div");e.classList.add("due-project"),L.appendChild(e),e.textContent=u.myProjectArray[t].title}}else if("isThisWeek"==e&&(k.textContent="Due This Week",a(new Date(n)))){const e=document.createElement("div");e.classList.add("due-project"),L.appendChild(e),e.textContent=u.myProjectArray[t].title}}},x=function(e){for(s.style.display="none",l.style.display="flex";L.hasChildNodes();)L.removeChild(L.firstChild);if("low"==e){k.textContent="Low Priority Projects";for(let e=0;e<u.myProjectArray.length;e++)if("Low"==u.myProjectArray[e].priority){const t=document.createElement("div");t.classList.add("due-project"),L.appendChild(t),t.textContent=u.myProjectArray[e].title}}else if("med"==e){k.textContent="Medium Priority Projects";for(let e=0;e<u.myProjectArray.length;e++)if("Medium"==u.myProjectArray[e].priority){const t=document.createElement("div");t.classList.add("due-project"),L.appendChild(t),t.textContent=u.myProjectArray[e].title}}else if("high"==e){k.textContent="High Priority Projects";for(let e=0;e<u.myProjectArray.length;e++)if("High"==u.myProjectArray[e].priority){const t=document.createElement("div");t.classList.add("due-project"),L.appendChild(t),t.textContent=u.myProjectArray[e].title}}};return c.addEventListener("click",(r=>{(r.target.classList.contains("project")||r.target.classList.contains("deleteSVG")||r.target.classList.contains("editSVG"))&&(n=r.target.closest(".project-display"),e=Array.from(n.parentNode.children).indexOf(n),t=u.myProjectArray[e])})),c.addEventListener("click",(t=>{if(t.target.classList.contains("deleteSVG")){const n=t.target.closest(".project-display");S(e),c.removeChild(n)}})),c.addEventListener("click",(t=>{t.target.classList.contains("editSVG")&&(u.displayEditForm(e),r=n.querySelector(".project"))})),c.addEventListener("click",(e=>{e.target.classList.contains("project")&&(s.style.display="flex",l.style.display="none",d.textContent=t.title,y.textContent=t.description,p.textContent=t.date,m.textContent=`(${t.priority}`,document.querySelectorAll(".individual-task").forEach((e=>{f.removeChild(e)})),function(){for(let e=0;e<t.tasks.length;e++){C();const n=document.querySelectorAll(".task-input"),r=document.querySelectorAll(".task-checkbox");n[e].value=t.tasks[e].taskName,r[e].checked=t.tasks[e].isCompleted}}())})),f.addEventListener("click",(e=>{if(e.target.classList.contains("task-checkbox")||e.target.classList.contains("task-input")||e.target.classList.contains("deleteSVG")){let t=e.target.closest(".individual-task");i=Array.from(t.parentNode.children).indexOf(t)}})),v.addEventListener("click",(()=>{let t,n;C(),f.addEventListener("change",(r=>{if(r.target.classList.contains("task-checkbox")){n=r.target.checked;const o=w(t,n);u.myProjectArray[e].tasks[i]=o}else if(r.target.classList.contains("task-input")){t=r.target.value;const o=w(t,n);u.myProjectArray[e].tasks[i]=o}}))})),f.addEventListener("click",(t=>{if(t.target.classList.contains("deleteSVG")){const n=t.target.closest(".individual-task");u.myProjectArray[e].tasks.splice(i,1),f.removeChild(n)}})),h.addEventListener("click",(()=>{b("isToday")})),g.addEventListener("click",(()=>{b("isThisWeek")})),j.addEventListener("click",(e=>{e.target.classList.contains("priority-low")?x("low"):e.target.classList.contains("priority-med")?x("med"):e.target.classList.contains("priority-high")&&x("high")})),{createProjectDiv:function(){const e=document.createElement("button"),t=document.createElement("button"),n=document.createElement("div"),r=document.createElement("div");n.classList.add("project-display"),c.appendChild(n),r.classList.add("project"),r.textContent=u.myProjectArray[u.myProjectArray.length-1].title,n.appendChild(r),e.classList.add("delete-project-button"),e.innerHTML='<svg class="deleteSVG" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path class="deleteSVG" d="M19,4H15.5L14.5,3H9.5L8.5,4H5V6H19M6,19A2,2 0 0,0 8,21H16A2,2 0 0,0 18,19V7H6V19Z" /></svg>',n.appendChild(e),t.classList.add("edit-project-button"),t.innerHTML='<svg class="editSVG" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path class="editSVG" d="M5,3C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V12H19V19H5V5H12V3H5M17.78,4C17.61,4 17.43,4.07 17.3,4.2L16.08,5.41L18.58,7.91L19.8,6.7C20.06,6.44 20.06,6 19.8,5.75L18.25,4.2C18.12,4.07 17.95,4 17.78,4M15.37,6.12L8,13.5V16H10.5L17.87,8.62L15.37,6.12Z" /></svg>',n.appendChild(t)},editProjectDiv:function(){r.textContent=t.title},deleteProject:S,index:e}}(),d=function(){const e=document.querySelector(".add-project"),t=document.querySelector(".edit-project"),n=document.querySelector(".add-project-form"),r=document.querySelector("#title"),o=document.querySelector("#description"),i=document.querySelector("#date"),c=document.querySelectorAll(".project-priority-button"),s=document.querySelector(".add"),a=document.querySelector(".cancel"),d=document.querySelector("#edit-title"),u=document.querySelector("#edit-description"),y=document.querySelector("#edit-date"),p=document.querySelector(".edit"),m=document.querySelector(".edit-cancel");let v,f=[],h="Low";const g=function(e,t,n,r){return{title:e,description:t,date:n,priority:r,tasks:[]}};return p.addEventListener("click",(e=>{e.preventDefault(),v.title=d.value,v.description=u.value,v.date=y.value,t.style.display="none",l.editProjectDiv(),n.reset()})),{addProject:e,addButton:s,displayForm:function(){n.reset(),e.style.display="flex",s.addEventListener("click",(t=>{if(""!=r.value){t.preventDefault();const c=g(r.value,o.value,i.value,h);f.push(c),l.createProjectDiv(),console.log(f),e.style.display="none",h="Low",n.reset()}})),a.addEventListener("click",(t=>{t.preventDefault(),e.style.display="none",n.reset()})),e.addEventListener("click",(t=>{t.target==e&&(e.style.display="none")})),c.forEach((e=>{e.addEventListener("click",(t=>{t.preventDefault(),h=e.textContent,console.log(h)}))}))},title:r,description:o,date:i,priority:c,myProjectArray:f,createProject:g,displayEditForm:function(e){t.style.display="flex",console.log(e),v=f[e],d.value=v.title,u.value=v.description,y.value=v.date,m.addEventListener("click",(e=>{e.preventDefault(),t.style.display="none",n.reset()})),t.addEventListener("click",(e=>{e.target==t&&(t.style.display="none")}))}}}(),u=d;document.querySelector(".project-button").addEventListener("click",u.displayForm)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,