(()=>{"use strict";function e(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function t(e){return t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},t(e)}function n(n){e(1,arguments);var r=Object.prototype.toString.call(n);return n instanceof Date||"object"===t(n)&&"[object Date]"===r?new Date(n.getTime()):"number"==typeof n||"[object Number]"===r?new Date(n):("string"!=typeof n&&"[object String]"!==r||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function r(t){e(1,arguments);var r=n(t);return r.setHours(0,0,0,0),r}function o(t){return e(1,arguments),function(t,n){e(2,arguments);var o=r(t),c=r(n);return o.getTime()===c.getTime()}(t,Date.now())}var c={};function i(){return c}function s(t,r){var o,c,s,l,a,d,u,y;e(1,arguments);var p=i(),m=function(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}(null!==(o=null!==(c=null!==(s=null!==(l=null==r?void 0:r.weekStartsOn)&&void 0!==l?l:null==r||null===(a=r.locale)||void 0===a||null===(d=a.options)||void 0===d?void 0:d.weekStartsOn)&&void 0!==s?s:p.weekStartsOn)&&void 0!==c?c:null===(u=p.locale)||void 0===u||null===(y=u.options)||void 0===y?void 0:y.weekStartsOn)&&void 0!==o?o:0);if(!(m>=0&&m<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var v=n(t),f=v.getDay(),g=(f<m?7:0)+f-m;return v.setDate(v.getDate()-g),v.setHours(0,0,0,0),v}function l(t,n){return e(1,arguments),function(t,n,r){e(2,arguments);var o=s(t,r),c=s(n,r);return o.getTime()===c.getTime()}(t,Date.now(),n)}const a=function(){if(localStorage.getItem("project")){let e=JSON.parse(localStorage.getItem("project"));for(let t=0;t<e.length;t++)p.myProjectArray.push(e[t]),console.log(e[t]);u.createProjectDiv()}},d=function(){let e=p.myProjectArray;localStorage.setItem("project",JSON.stringify(e)),console.log(JSON.parse(localStorage.getItem("project")))},u=function(){let e,t,n,r=0,c=0;const i=document.querySelector(".projects-lists"),s=document.querySelector(".main-content"),a=document.querySelector(".due-content"),u=document.querySelector(".project-title"),y=document.querySelector(".project-description"),m=document.querySelector(".project-due"),v=document.querySelector(".priority"),f=document.querySelector(".task-button"),g=document.querySelector(".all-tasks"),h=document.querySelector(".due-today"),j=document.querySelector(".due-this-week"),k=document.querySelector(".due-title"),S=document.querySelector(".due-projects-lists"),L=document.querySelector(".priority-tab"),C=function(t){p.myProjectArray[t]===e&&(s.style.display="none"),p.myProjectArray.splice(t,1)},w=function(){const e=document.createElement("div");e.classList.add("individual-task"),g.appendChild(e);const t=document.createElement("div");t.classList.add("task-checkbox-div"),e.appendChild(t),t.innerHTML='<label for="task1-checkbox"></label><input type="checkbox" class = "task-checkbox" id="task1-checkbox" name="checkbox">';const n=document.createElement("div");n.classList.add("task-input-div"),e.appendChild(n),n.innerHTML='<label for="task1-input"></label><input type="text" class="task-input" id="task1-input" name="task" required>';const r=document.createElement("div");r.classList.add("task-delete-button"),e.appendChild(r),r.innerHTML='<svg class="deleteSVG" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path class="deleteSVG" d="M19,4H15.5L14.5,3H9.5L8.5,4H5V6H19M6,19A2,2 0 0,0 8,21H16A2,2 0 0,0 18,19V7H6V19Z" /></svg>'},b=function(e,t){return null==t&&(t=!1),{taskName:e,isCompleted:t}},x=function(e){for(s.style.display="none",a.style.display="flex";S.hasChildNodes();)S.removeChild(S.firstChild);for(let t=0;t<p.myProjectArray.length;t++){let n=new Date(`${p.myProjectArray[t].date}CDT`);if("isToday"==e){if(k.textContent="Due Today",o(new Date(n))){const e=document.createElement("div");e.classList.add("due-project"),S.appendChild(e),e.textContent=p.myProjectArray[t].title}}else if("isThisWeek"==e&&(k.textContent="Due This Week",l(new Date(n)))){const e=document.createElement("div");e.classList.add("due-project"),S.appendChild(e),e.textContent=p.myProjectArray[t].title}}},E=function(e){for(s.style.display="none",a.style.display="flex";S.hasChildNodes();)S.removeChild(S.firstChild);if("low"==e){k.textContent="Low Priority Projects";for(let e=0;e<p.myProjectArray.length;e++)if("Low"==p.myProjectArray[e].priority){const t=document.createElement("div");t.classList.add("due-project"),S.appendChild(t),t.textContent=p.myProjectArray[e].title}}else if("med"==e){k.textContent="Medium Priority Projects";for(let e=0;e<p.myProjectArray.length;e++)if("Medium"==p.myProjectArray[e].priority){const t=document.createElement("div");t.classList.add("due-project"),S.appendChild(t),t.textContent=p.myProjectArray[e].title}}else if("high"==e){k.textContent="High Priority Projects";for(let e=0;e<p.myProjectArray.length;e++)if("High"==p.myProjectArray[e].priority){const t=document.createElement("div");t.classList.add("due-project"),S.appendChild(t),t.textContent=p.myProjectArray[e].title}}};return i.addEventListener("click",(n=>{(n.target.classList.contains("project")||n.target.classList.contains("deleteSVG")||n.target.classList.contains("editSVG"))&&(t=n.target.closest(".project-display"),r=Array.from(t.parentNode.children).indexOf(t),e=p.myProjectArray[r])})),i.addEventListener("click",(e=>{if(e.target.classList.contains("deleteSVG")){const t=e.target.closest(".project-display");C(r),i.removeChild(t),d()}})),i.addEventListener("click",(e=>{e.target.classList.contains("editSVG")&&(p.displayEditForm(r),n=t.querySelector(".project"))})),i.addEventListener("click",(t=>{t.target.classList.contains("project")&&(s.style.display="flex",a.style.display="none",u.textContent=e.title,y.textContent=e.description,m.textContent=e.date,v.textContent=`(${e.priority}`,document.querySelectorAll(".individual-task").forEach((e=>{g.removeChild(e)})),function(){for(let t=0;t<e.tasks.length;t++){w();const n=document.querySelectorAll(".task-input"),r=document.querySelectorAll(".task-checkbox");n[t].value=e.tasks[t].taskName,r[t].checked=e.tasks[t].isCompleted}}())})),g.addEventListener("click",(e=>{if(e.target.classList.contains("task-checkbox")||e.target.classList.contains("task-input")||e.target.classList.contains("deleteSVG")){let t=e.target.closest(".individual-task");c=Array.from(t.parentNode.children).indexOf(t)}})),f.addEventListener("click",(()=>{let e,t;w(),g.addEventListener("change",(n=>{if(n.target.classList.contains("task-checkbox")){t=n.target.checked;const o=b(e,t);p.myProjectArray[r].tasks[c]=o,d()}else if(n.target.classList.contains("task-input")){e=n.target.value;const o=b(e,t);p.myProjectArray[r].tasks[c]=o,d()}}))})),g.addEventListener("click",(e=>{if(e.target.classList.contains("deleteSVG")){const t=e.target.closest(".individual-task");p.myProjectArray[r].tasks.splice(c,1),g.removeChild(t),d()}})),h.addEventListener("click",(()=>{x("isToday")})),j.addEventListener("click",(()=>{x("isThisWeek")})),L.addEventListener("click",(e=>{e.target.classList.contains("priority-low")?E("low"):e.target.classList.contains("priority-med")?E("med"):e.target.classList.contains("priority-high")&&E("high")})),{createProjectDiv:function(){document.querySelectorAll(".project-display").forEach((e=>{i.removeChild(e)}));for(let e=0;e<p.myProjectArray.length;e++){const t=document.createElement("button"),n=document.createElement("button"),r=document.createElement("div"),o=document.createElement("div");r.classList.add("project-display"),i.appendChild(r),o.classList.add("project"),o.textContent=p.myProjectArray[e].title,r.appendChild(o),t.classList.add("delete-project-button"),t.innerHTML='<svg class="deleteSVG" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path class="deleteSVG" d="M19,4H15.5L14.5,3H9.5L8.5,4H5V6H19M6,19A2,2 0 0,0 8,21H16A2,2 0 0,0 18,19V7H6V19Z" /></svg>',r.appendChild(t),n.classList.add("edit-project-button"),n.innerHTML='<svg class="editSVG" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path class="editSVG" d="M5,3C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V12H19V19H5V5H12V3H5M17.78,4C17.61,4 17.43,4.07 17.3,4.2L16.08,5.41L18.58,7.91L19.8,6.7C20.06,6.44 20.06,6 19.8,5.75L18.25,4.2C18.12,4.07 17.95,4 17.78,4M15.37,6.12L8,13.5V16H10.5L17.87,8.62L15.37,6.12Z" /></svg>',r.appendChild(n)}},editProjectDiv:function(){n.textContent=e.title},deleteProject:C,index:r}}(),y=function(){const e=document.querySelector(".add-project"),t=document.querySelector(".edit-project"),n=document.querySelector(".add-project-form"),r=document.querySelector("#title"),o=document.querySelector("#description"),c=document.querySelector("#date"),i=document.querySelectorAll(".project-priority-button"),s=document.querySelector(".add"),l=document.querySelector(".cancel"),a=document.querySelector("#edit-title"),y=document.querySelector("#edit-description"),p=document.querySelector("#edit-date"),m=document.querySelector(".edit"),v=document.querySelector(".edit-cancel");let f,g=[],h="Low";const j=function(e,t,n,r){return{title:e,description:t,date:n,priority:r,tasks:[]}};return m.addEventListener("click",(e=>{e.preventDefault(),f.title=a.value,f.description=y.value,f.date=p.value,t.style.display="none",d(),u.editProjectDiv(),n.reset()})),{addProject:e,addButton:s,displayForm:function(){n.reset(),e.style.display="flex",s.addEventListener("click",(t=>{if(""!=r.value){t.preventDefault();const i=j(r.value,o.value,c.value,h);g.push(i),d(),u.createProjectDiv(),console.log(g),e.style.display="none",h="Low",n.reset()}})),l.addEventListener("click",(t=>{t.preventDefault(),e.style.display="none",n.reset()})),e.addEventListener("click",(t=>{t.target==e&&(e.style.display="none")})),i.forEach((e=>{e.addEventListener("click",(t=>{t.preventDefault(),h=e.textContent,console.log(h)}))}))},title:r,description:o,date:c,priority:i,myProjectArray:g,createProject:j,displayEditForm:function(e){t.style.display="flex",console.log(e),console.log(u.index),f=g[e],a.value=f.title,y.value=f.description,p.value=f.date,v.addEventListener("click",(e=>{e.preventDefault(),t.style.display="none",n.reset()})),t.addEventListener("click",(e=>{e.target==t&&(t.style.display="none")}))}}}(),p=y;a(),console.log(p.myProjectArray),document.querySelector(".project-button").addEventListener("click",p.displayForm)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,