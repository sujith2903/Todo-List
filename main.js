(()=>{"use strict";function e(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function t(e){return t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},t(e)}function n(n){e(1,arguments);var o=Object.prototype.toString.call(n);return n instanceof Date||"object"===t(n)&&"[object Date]"===o?new Date(n.getTime()):"number"==typeof n||"[object Number]"===o?new Date(n):("string"!=typeof n&&"[object String]"!==o||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function o(t){e(1,arguments);var o=n(t);return o.setHours(0,0,0,0),o}function r(t){return e(1,arguments),function(t,n){e(2,arguments);var r=o(t),s=o(n);return r.getTime()===s.getTime()}(t,Date.now())}var s={};function c(){return s}function a(t,o){var r,s,a,i,l,d,u,p;e(1,arguments);var y=c(),m=function(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}(null!==(r=null!==(s=null!==(a=null!==(i=null==o?void 0:o.weekStartsOn)&&void 0!==i?i:null==o||null===(l=o.locale)||void 0===l||null===(d=l.options)||void 0===d?void 0:d.weekStartsOn)&&void 0!==a?a:y.weekStartsOn)&&void 0!==s?s:null===(u=y.locale)||void 0===u||null===(p=u.options)||void 0===p?void 0:p.weekStartsOn)&&void 0!==r?r:0);if(!(m>=0&&m<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var v=n(t),f=v.getDay(),k=(f<m?7:0)+f-m;return v.setDate(v.getDate()-k),v.setHours(0,0,0,0),v}function i(t,n){return e(1,arguments),function(t,n,o){e(2,arguments);var r=a(t,o),s=a(n,o);return r.getTime()===s.getTime()}(t,Date.now(),n)}const l=function(){let e,t,n;const o=document.querySelector(".projects-lists"),s=document.querySelector(".main-content"),c=document.querySelector(".due-content"),a=document.querySelector(".project-title"),l=document.querySelector(".project-description"),d=document.querySelector(".project-due"),p=document.querySelector(".priority"),y=document.querySelector(".task-button"),m=document.querySelector(".all-tasks"),v=document.querySelector(".due-today"),f=document.querySelector(".due-this-week"),k=document.querySelector(".due-title"),g=document.querySelector(".due-projects-lists"),h=function(e){u.myProjectArray[e]===n&&(s.style.display="none"),u.myProjectArray.splice(e,1)},L=function(){const e=document.createElement("div");e.classList.add("individual-task"),m.appendChild(e);const t=document.createElement("div");t.classList.add("task-checkbox-div"),e.appendChild(t),t.innerHTML='<label for="task1-checkbox"></label><input type="checkbox" class = "task-checkbox" id="task1-checkbox" name="checkbox">';const n=document.createElement("div");n.classList.add("task-input-div"),e.appendChild(n),n.innerHTML='<label for="task1-input"></label><input type="text" class="task-input" id="task1-input" name="task" required>';const o=document.createElement("div");o.classList.add("task-delete-button"),e.appendChild(o),o.innerHTML='<svg class="deleteSVG" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path class="deleteSVG" d="M19,4H15.5L14.5,3H9.5L8.5,4H5V6H19M6,19A2,2 0 0,0 8,21H16A2,2 0 0,0 18,19V7H6V19Z" /></svg>'},S=function(e,t){return null==t&&(t=!1),{taskName:e,isCompleted:t}},b=function(e){for(s.style.display="none",c.style.display="flex";g.hasChildNodes();)g.removeChild(g.firstChild);for(let t=0;t<u.myProjectArray.length;t++){let n=new Date(`${u.myProjectArray[t].date}CDT`);if("isToday"==e){if(k.textContent="Due Today",r(new Date(n))){const e=document.createElement("div");e.classList.add("due-project"),g.appendChild(e),e.textContent=u.myProjectArray[t].title}}else if("isThisWeek"==e&&(k.textContent="Due This Week",i(new Date(n)))){const e=document.createElement("div");e.classList.add("due-project"),g.appendChild(e),e.textContent=u.myProjectArray[t].title}}};return o.addEventListener("click",(t=>{if(t.target.classList.contains("project")||t.target.classList.contains("deleteSVG")||t.target.classList.contains("editSVG")){let n=t.target.closest(".project-display");e=Array.from(n.parentNode.children).indexOf(n)}})),o.addEventListener("click",(t=>{if(t.target.classList.contains("deleteSVG")){const n=t.target.closest(".project-display");h(e),o.removeChild(n)}})),o.addEventListener("click",(t=>{t.target.classList.contains("project")&&(s.style.display="flex",c.style.display="none",n=u.myProjectArray[e],console.log(n),a.textContent=n.title,l.textContent=n.description,d.textContent=n.date,p.textContent=n.priority,document.querySelectorAll(".individual-task").forEach((e=>{m.removeChild(e)})),function(){for(let e=0;e<n.tasks.length;e++){L();const t=document.querySelectorAll(".task-input"),o=document.querySelectorAll(".task-checkbox");t[e].value=n.tasks[e].taskName,o[e].checked=n.tasks[e].isCompleted}}())})),m.addEventListener("click",(e=>{if(e.target.classList.contains("task-checkbox")||e.target.classList.contains("task-input")||e.target.classList.contains("deleteSVG")){let n=e.target.closest(".individual-task");t=Array.from(n.parentNode.children).indexOf(n)}})),y.addEventListener("click",(()=>{let n,o;L(),m.addEventListener("change",(r=>{if(r.target.classList.contains("task-checkbox")){o=r.target.checked;const s=S(n,o);u.myProjectArray[e].tasks[t]=s}else if(r.target.classList.contains("task-input")){n=r.target.value;const s=S(n,o);u.myProjectArray[e].tasks[t]=s}}))})),m.addEventListener("click",(n=>{if(n.target.classList.contains("deleteSVG")){const o=n.target.closest(".individual-task");u.myProjectArray[e].tasks.splice(t,1),m.removeChild(o)}})),v.addEventListener("click",(()=>{b("isToday")})),f.addEventListener("click",(()=>{b("isThisWeek")})),{createProjectDiv:function(){const e=document.createElement("button"),t=document.createElement("button"),n=document.createElement("div"),r=document.createElement("div");n.classList.add("project-display"),o.appendChild(n),r.classList.add("project"),r.textContent=u.myProjectArray[u.myProjectArray.length-1].title,n.appendChild(r),e.classList.add("delete-project-button"),e.innerHTML='<svg class="deleteSVG" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path class="deleteSVG" d="M19,4H15.5L14.5,3H9.5L8.5,4H5V6H19M6,19A2,2 0 0,0 8,21H16A2,2 0 0,0 18,19V7H6V19Z" /></svg>',n.appendChild(e),t.classList.add("edit-project-button"),t.innerHTML='<svg class="editSVG" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path class="editSVG" d="M5,3C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V12H19V19H5V5H12V3H5M17.78,4C17.61,4 17.43,4.07 17.3,4.2L16.08,5.41L18.58,7.91L19.8,6.7C20.06,6.44 20.06,6 19.8,5.75L18.25,4.2C18.12,4.07 17.95,4 17.78,4M15.37,6.12L8,13.5V16H10.5L17.87,8.62L15.37,6.12Z" /></svg>',n.appendChild(t)},deleteProject:h}}(),d=function(){const e=document.querySelector(".add-project"),t=document.querySelector(".add-project-form"),n=document.querySelector("#title"),o=document.querySelector("#description"),r=document.querySelector("#date"),s=document.querySelectorAll(".project-priority-button"),c=document.querySelector(".add"),a=document.querySelector(".cancel");let i=[],d="Low";return{addProject:e,displayForm:function(){e.style.display="flex",c.addEventListener("click",(s=>{if(""!=n.value){s.preventDefault();const c=function(e,t,n,o){return{title:e,description:t,date:n,priority:o,tasks:[]}}(n.value,o.value,r.value,d);i.push(c),l.createProjectDiv(),console.log(i),e.style.display="none",d="Low",t.reset()}})),a.addEventListener("click",(n=>{n.preventDefault(),e.style.display="none",t.reset()})),e.addEventListener("click",(t=>{t.target==e&&(e.style.display="none")})),s.forEach((e=>{e.addEventListener("click",(t=>{t.preventDefault(),d=e.textContent,console.log(d)}))}))},myProjectArray:i}}(),u=d,p=document.querySelector(".project-button");document.querySelector(".projects-lists"),p.addEventListener("click",u.displayForm)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,