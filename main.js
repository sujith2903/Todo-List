(()=>{"use strict";function e(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function t(e){return t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},t(e)}function r(r){e(1,arguments);var o=Object.prototype.toString.call(r);return r instanceof Date||"object"===t(r)&&"[object Date]"===o?new Date(r.getTime()):"number"==typeof r||"[object Number]"===o?new Date(r):("string"!=typeof r&&"[object String]"!==o||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function o(t){e(1,arguments);var o=r(t);return o.setHours(0,0,0,0),o}function n(t){return e(1,arguments),function(t,r){e(2,arguments);var n=o(t),i=o(r);return n.getTime()===i.getTime()}(t,Date.now())}var i={};function s(){return i}function c(t,o){var n,i,c,a,l,d,u,y;e(1,arguments);var p=s(),m=function(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}(null!==(n=null!==(i=null!==(c=null!==(a=null==o?void 0:o.weekStartsOn)&&void 0!==a?a:null==o||null===(l=o.locale)||void 0===l||null===(d=l.options)||void 0===d?void 0:d.weekStartsOn)&&void 0!==c?c:p.weekStartsOn)&&void 0!==i?i:null===(u=p.locale)||void 0===u||null===(y=u.options)||void 0===y?void 0:y.weekStartsOn)&&void 0!==n?n:0);if(!(m>=0&&m<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var f=r(t),v=f.getDay(),g=(v<m?7:0)+v-m;return f.setDate(f.getDate()-g),f.setHours(0,0,0,0),f}function a(t,r){return e(1,arguments),function(t,r,o){e(2,arguments);var n=c(t,o),i=c(r,o);return n.getTime()===i.getTime()}(t,Date.now(),r)}const l=function(){function e(){let e=y.myProjectArray;localStorage.setItem("project",JSON.stringify(e)),0==e.length&&localStorage.clear()}return{populateData:function(){if(localStorage.getItem("project")){let e=JSON.parse(localStorage.getItem("project"));for(let t=0;t<e.length;t++)y.myProjectArray.push(e[t]);d.createProjectDiv()}else if(!localStorage.getItem("project")){console.log("test");let t=[{title:"Gym",description:"List of workouts",date:"",priority:"Medium",tasks:[{taskName:"Deadlifts",isCompleted:!1},{taskName:"Squat",isCompleted:!1},{taskName:"Bench Press",isCompleted:!1}]},{title:"Class",description:"List of Home works",date:"2023-05-19",priority:"High",tasks:[{taskName:"Physics Assignment",isCompleted:!0}]}];for(let e=0;e<t.length;e++)y.myProjectArray.push(t[e]);d.createProjectDiv(),e()}},storeData:e}}(),d=function(){let e,t,r,o=0,i=0;const s=document.querySelector(".projects-lists"),c=document.querySelector(".main-content"),d=document.querySelector(".due-content"),u=document.querySelector(".project-title"),p=document.querySelector(".project-description"),m=document.querySelector(".project-due"),f=document.querySelector(".priority"),v=document.querySelector(".task-button"),g=document.querySelector(".all-tasks"),h=document.querySelector(".due-today"),k=document.querySelector(".due-this-week"),j=document.querySelector(".due-title"),L=document.querySelector(".due-projects-lists"),S=document.querySelector(".priority-tab"),C=function(t){y.myProjectArray[t]===e&&(c.style.display="none"),y.myProjectArray.splice(t,1)},w=function(){const e=document.createElement("div");e.classList.add("individual-task"),g.appendChild(e);const t=document.createElement("div");t.classList.add("task-checkbox-div"),e.appendChild(t),t.innerHTML='<label for="task1-checkbox"></label><input type="checkbox" class = "task-checkbox" id="task1-checkbox" name="checkbox">';const r=document.createElement("div");r.classList.add("task-input-div"),e.appendChild(r),r.innerHTML='<label for="task1-input"></label><input type="text" class="task-input" id="task1-input" name="task" required>';const o=document.createElement("div");o.classList.add("task-delete-button"),e.appendChild(o),o.innerHTML='<svg class="deleteSVG" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path class="deleteSVG" d="M19,4H15.5L14.5,3H9.5L8.5,4H5V6H19M6,19A2,2 0 0,0 8,21H16A2,2 0 0,0 18,19V7H6V19Z" /></svg>'},b=function(e,t){return null==t&&(t=!1),{taskName:e,isCompleted:t}},P=function(e){for(c.style.display="none",d.style.display="flex";L.hasChildNodes();)L.removeChild(L.firstChild);for(let t=0;t<y.myProjectArray.length;t++){let r=new Date(`${y.myProjectArray[t].date}CDT`);if("isToday"==e){if(j.textContent="Due Today",n(new Date(r))){const e=document.createElement("div");e.classList.add("due-project"),L.appendChild(e),e.textContent=y.myProjectArray[t].title}}else if("isThisWeek"==e&&(j.textContent="Due This Week",a(new Date(r)))){const e=document.createElement("div");e.classList.add("due-project"),L.appendChild(e),e.textContent=y.myProjectArray[t].title}}},x=function(e){for(c.style.display="none",d.style.display="flex";L.hasChildNodes();)L.removeChild(L.firstChild);if("low"==e){j.textContent="Low Priority Projects";for(let e=0;e<y.myProjectArray.length;e++)if("Low"==y.myProjectArray[e].priority){const t=document.createElement("div");t.classList.add("due-project"),L.appendChild(t),t.textContent=y.myProjectArray[e].title}}else if("med"==e){j.textContent="Medium Priority Projects";for(let e=0;e<y.myProjectArray.length;e++)if("Medium"==y.myProjectArray[e].priority){const t=document.createElement("div");t.classList.add("due-project"),L.appendChild(t),t.textContent=y.myProjectArray[e].title}}else if("high"==e){j.textContent="High Priority Projects";for(let e=0;e<y.myProjectArray.length;e++)if("High"==y.myProjectArray[e].priority){const t=document.createElement("div");t.classList.add("due-project"),L.appendChild(t),t.textContent=y.myProjectArray[e].title}}};return s.addEventListener("click",(r=>{(r.target.classList.contains("project")||r.target.classList.contains("deleteSVG")||r.target.classList.contains("editSVG"))&&(t=r.target.closest(".project-display"),o=Array.from(t.parentNode.children).indexOf(t),e=y.myProjectArray[o])})),s.addEventListener("click",(e=>{if(e.target.classList.contains("deleteSVG")){const t=e.target.closest(".project-display");C(o),s.removeChild(t),l.storeData()}})),s.addEventListener("click",(e=>{e.target.classList.contains("editSVG")&&(y.displayEditForm(o),r=t.querySelector(".project"))})),s.addEventListener("click",(t=>{t.target.classList.contains("project")&&(c.style.display="flex",d.style.display="none",u.textContent=e.title,p.textContent=e.description,m.textContent=e.date,f.textContent=`(${e.priority}`,document.querySelectorAll(".individual-task").forEach((e=>{g.removeChild(e)})),function(){for(let t=0;t<e.tasks.length;t++){w();const r=document.querySelectorAll(".task-input"),o=document.querySelectorAll(".task-checkbox");r[t].value=e.tasks[t].taskName,o[t].checked=e.tasks[t].isCompleted}}())})),g.addEventListener("click",(e=>{if(e.target.classList.contains("task-checkbox")||e.target.classList.contains("task-input")||e.target.classList.contains("deleteSVG")){let t=e.target.closest(".individual-task");i=Array.from(t.parentNode.children).indexOf(t)}})),v.addEventListener("click",(()=>{let e,t;w(),g.addEventListener("change",(r=>{if(r.target.classList.contains("task-checkbox")){t=r.target.checked;const n=b(e,t);y.myProjectArray[o].tasks[i]=n,l.storeData()}else if(r.target.classList.contains("task-input")){e=r.target.value;const n=b(e,t);y.myProjectArray[o].tasks[i]=n,l.storeData()}}))})),g.addEventListener("click",(e=>{if(e.target.classList.contains("deleteSVG")){const t=e.target.closest(".individual-task");y.myProjectArray[o].tasks.splice(i,1),g.removeChild(t),l.storeData()}})),h.addEventListener("click",(()=>{P("isToday")})),k.addEventListener("click",(()=>{P("isThisWeek")})),S.addEventListener("click",(e=>{e.target.classList.contains("priority-low")?x("low"):e.target.classList.contains("priority-med")?x("med"):e.target.classList.contains("priority-high")&&x("high")})),{createProjectDiv:function(){document.querySelectorAll(".project-display").forEach((e=>{s.removeChild(e)}));for(let e=0;e<y.myProjectArray.length;e++){const t=document.createElement("button"),r=document.createElement("button"),o=document.createElement("div"),n=document.createElement("div");o.classList.add("project-display"),s.appendChild(o),n.classList.add("project"),n.textContent=y.myProjectArray[e].title,o.appendChild(n),t.classList.add("delete-project-button"),t.innerHTML='<svg class="deleteSVG" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path class="deleteSVG" d="M19,4H15.5L14.5,3H9.5L8.5,4H5V6H19M6,19A2,2 0 0,0 8,21H16A2,2 0 0,0 18,19V7H6V19Z" /></svg>',o.appendChild(t),r.classList.add("edit-project-button"),r.innerHTML='<svg class="editSVG" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path class="editSVG" d="M5,3C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V12H19V19H5V5H12V3H5M17.78,4C17.61,4 17.43,4.07 17.3,4.2L16.08,5.41L18.58,7.91L19.8,6.7C20.06,6.44 20.06,6 19.8,5.75L18.25,4.2C18.12,4.07 17.95,4 17.78,4M15.37,6.12L8,13.5V16H10.5L17.87,8.62L15.37,6.12Z" /></svg>',o.appendChild(r)}},editProjectDiv:function(){r.textContent=e.title},deleteProject:C,index:o}}(),u=function(){const e=document.querySelector(".add-project"),t=document.querySelector(".edit-project"),r=document.querySelector(".add-project-form"),o=document.querySelector("#title"),n=document.querySelector("#description"),i=document.querySelector("#date"),s=document.querySelectorAll(".project-priority-button"),c=document.querySelector(".add"),a=document.querySelector(".cancel"),u=document.querySelector("#edit-title"),y=document.querySelector("#edit-description"),p=document.querySelector("#edit-date"),m=document.querySelector(".edit"),f=document.querySelector(".edit-cancel");let v,g=[],h="Low";const k=function(e,t,r,o){return{title:e,description:t,date:r,priority:o,tasks:[]}};return m.addEventListener("click",(e=>{e.preventDefault(),v.title=u.value,v.description=y.value,v.date=p.value,t.style.display="none",l.storeData(),d.editProjectDiv(),r.reset()})),{addProject:e,addButton:c,displayForm:function(){r.reset(),e.style.display="flex",c.addEventListener("click",(t=>{if(""!=o.value){t.preventDefault();const s=k(o.value,n.value,i.value,h);g.push(s),l.storeData(),d.createProjectDiv(),console.log(g),e.style.display="none",h="Low",r.reset()}})),a.addEventListener("click",(t=>{t.preventDefault(),e.style.display="none",r.reset()})),e.addEventListener("click",(t=>{t.target==e&&(e.style.display="none")})),s.forEach((e=>{e.addEventListener("click",(t=>{t.preventDefault(),h=e.textContent,console.log(h)}))}))},title:o,description:n,date:i,priority:s,myProjectArray:g,createProject:k,displayEditForm:function(e){t.style.display="flex",console.log(e),console.log(d.index),v=g[e],u.value=v.title,y.value=v.description,p.value=v.date,f.addEventListener("click",(e=>{e.preventDefault(),t.style.display="none",r.reset()})),t.addEventListener("click",(e=>{e.target==t&&(t.style.display="none")}))}}}(),y=u;l.populateData(),console.log(y.myProjectArray),document.querySelector(".project-button").addEventListener("click",y.displayForm)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,