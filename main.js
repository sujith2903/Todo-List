(()=>{"use strict";function e(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function t(e){return t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},t(e)}function n(n){e(1,arguments);var r=Object.prototype.toString.call(n);return n instanceof Date||"object"===t(n)&&"[object Date]"===r?new Date(n.getTime()):"number"==typeof n||"[object Number]"===r?new Date(n):("string"!=typeof n&&"[object String]"!==r||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function r(t){e(1,arguments);var r=n(t);return r.setHours(0,0,0,0),r}function o(t){return e(1,arguments),function(t,n){e(2,arguments);var o=r(t),c=r(n);return o.getTime()===c.getTime()}(t,Date.now())}var c={};function s(){return c}function i(t,r){var o,c,i,a,l,d,u,y;e(1,arguments);var p=s(),m=function(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}(null!==(o=null!==(c=null!==(i=null!==(a=null==r?void 0:r.weekStartsOn)&&void 0!==a?a:null==r||null===(l=r.locale)||void 0===l||null===(d=l.options)||void 0===d?void 0:d.weekStartsOn)&&void 0!==i?i:p.weekStartsOn)&&void 0!==c?c:null===(u=p.locale)||void 0===u||null===(y=u.options)||void 0===y?void 0:y.weekStartsOn)&&void 0!==o?o:0);if(!(m>=0&&m<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var f=n(t),v=f.getDay(),h=(v<m?7:0)+v-m;return f.setDate(f.getDate()-h),f.setHours(0,0,0,0),f}function a(t,n){return e(1,arguments),function(t,n,r){e(2,arguments);var o=i(t,r),c=i(n,r);return o.getTime()===c.getTime()}(t,Date.now(),n)}const l=function(){let e,t,n;const r=document.querySelector(".projects-lists"),c=document.querySelector(".main-content"),s=document.querySelector(".due-content"),i=document.querySelector(".project-title"),l=document.querySelector(".project-description"),d=document.querySelector(".project-due"),y=document.querySelector(".priority"),p=document.querySelector(".task-button"),m=document.querySelector(".all-tasks"),f=document.querySelector(".due-today"),v=document.querySelector(".due-this-week"),h=document.querySelector(".due-title"),g=document.querySelector(".due-projects-lists"),k=document.querySelector(".priority-tab"),L=function(e){u.myProjectArray[e]===n&&(c.style.display="none"),u.myProjectArray.splice(e,1)},j=function(){const e=document.createElement("div");e.classList.add("individual-task"),m.appendChild(e);const t=document.createElement("div");t.classList.add("task-checkbox-div"),e.appendChild(t),t.innerHTML='<label for="task1-checkbox"></label><input type="checkbox" class = "task-checkbox" id="task1-checkbox" name="checkbox">';const n=document.createElement("div");n.classList.add("task-input-div"),e.appendChild(n),n.innerHTML='<label for="task1-input"></label><input type="text" class="task-input" id="task1-input" name="task" required>';const r=document.createElement("div");r.classList.add("task-delete-button"),e.appendChild(r),r.innerHTML='<svg class="deleteSVG" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path class="deleteSVG" d="M19,4H15.5L14.5,3H9.5L8.5,4H5V6H19M6,19A2,2 0 0,0 8,21H16A2,2 0 0,0 18,19V7H6V19Z" /></svg>'},S=function(e,t){return null==t&&(t=!1),{taskName:e,isCompleted:t}},w=function(e){for(c.style.display="none",s.style.display="flex";g.hasChildNodes();)g.removeChild(g.firstChild);for(let t=0;t<u.myProjectArray.length;t++){let n=new Date(`${u.myProjectArray[t].date}CDT`);if("isToday"==e){if(h.textContent="Due Today",o(new Date(n))){const e=document.createElement("div");e.classList.add("due-project"),g.appendChild(e),e.textContent=u.myProjectArray[t].title}}else if("isThisWeek"==e&&(h.textContent="Due This Week",a(new Date(n)))){const e=document.createElement("div");e.classList.add("due-project"),g.appendChild(e),e.textContent=u.myProjectArray[t].title}}},C=function(e){for(c.style.display="none",s.style.display="flex";g.hasChildNodes();)g.removeChild(g.firstChild);if("low"==e){h.textContent="Low Priority Projects";for(let e=0;e<u.myProjectArray.length;e++)if("Low"==u.myProjectArray[e].priority){const t=document.createElement("div");t.classList.add("due-project"),g.appendChild(t),t.textContent=u.myProjectArray[e].title}}else if("med"==e){h.textContent="Medium Priority Projects";for(let e=0;e<u.myProjectArray.length;e++)if("Medium"==u.myProjectArray[e].priority){const t=document.createElement("div");t.classList.add("due-project"),g.appendChild(t),t.textContent=u.myProjectArray[e].title}}else if("high"==e){h.textContent="High Priority Projects";for(let e=0;e<u.myProjectArray.length;e++)if("High"==u.myProjectArray[e].priority){const t=document.createElement("div");t.classList.add("due-project"),g.appendChild(t),t.textContent=u.myProjectArray[e].title}}};return r.addEventListener("click",(t=>{if(t.target.classList.contains("project")||t.target.classList.contains("deleteSVG")||t.target.classList.contains("editSVG")){let n=t.target.closest(".project-display");e=Array.from(n.parentNode.children).indexOf(n)}})),r.addEventListener("click",(t=>{if(t.target.classList.contains("deleteSVG")){const n=t.target.closest(".project-display");L(e),r.removeChild(n)}})),r.addEventListener("click",(t=>{t.target.classList.contains("project")&&(c.style.display="flex",s.style.display="none",n=u.myProjectArray[e],console.log(n),i.textContent=n.title,l.textContent=n.description,d.textContent=n.date,y.textContent=n.priority,document.querySelectorAll(".individual-task").forEach((e=>{m.removeChild(e)})),function(){for(let e=0;e<n.tasks.length;e++){j();const t=document.querySelectorAll(".task-input"),r=document.querySelectorAll(".task-checkbox");t[e].value=n.tasks[e].taskName,r[e].checked=n.tasks[e].isCompleted}}())})),m.addEventListener("click",(e=>{if(e.target.classList.contains("task-checkbox")||e.target.classList.contains("task-input")||e.target.classList.contains("deleteSVG")){let n=e.target.closest(".individual-task");t=Array.from(n.parentNode.children).indexOf(n)}})),p.addEventListener("click",(()=>{let n,r;j(),m.addEventListener("change",(o=>{if(o.target.classList.contains("task-checkbox")){r=o.target.checked;const c=S(n,r);u.myProjectArray[e].tasks[t]=c}else if(o.target.classList.contains("task-input")){n=o.target.value;const c=S(n,r);u.myProjectArray[e].tasks[t]=c}}))})),m.addEventListener("click",(n=>{if(n.target.classList.contains("deleteSVG")){const r=n.target.closest(".individual-task");u.myProjectArray[e].tasks.splice(t,1),m.removeChild(r)}})),f.addEventListener("click",(()=>{w("isToday")})),v.addEventListener("click",(()=>{w("isThisWeek")})),k.addEventListener("click",(e=>{e.target.classList.contains("priority-low")?C("low"):e.target.classList.contains("priority-med")?C("med"):e.target.classList.contains("priority-high")&&C("high")})),{createProjectDiv:function(){const e=document.createElement("button"),t=document.createElement("button"),n=document.createElement("div"),o=document.createElement("div");n.classList.add("project-display"),r.appendChild(n),o.classList.add("project"),o.textContent=u.myProjectArray[u.myProjectArray.length-1].title,n.appendChild(o),e.classList.add("delete-project-button"),e.innerHTML='<svg class="deleteSVG" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path class="deleteSVG" d="M19,4H15.5L14.5,3H9.5L8.5,4H5V6H19M6,19A2,2 0 0,0 8,21H16A2,2 0 0,0 18,19V7H6V19Z" /></svg>',n.appendChild(e),t.classList.add("edit-project-button"),t.innerHTML='<svg class="editSVG" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path class="editSVG" d="M5,3C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V12H19V19H5V5H12V3H5M17.78,4C17.61,4 17.43,4.07 17.3,4.2L16.08,5.41L18.58,7.91L19.8,6.7C20.06,6.44 20.06,6 19.8,5.75L18.25,4.2C18.12,4.07 17.95,4 17.78,4M15.37,6.12L8,13.5V16H10.5L17.87,8.62L15.37,6.12Z" /></svg>',n.appendChild(t)},deleteProject:L}}(),d=function(){const e=document.querySelector(".add-project"),t=document.querySelector(".add-project-form"),n=document.querySelector("#title"),r=document.querySelector("#description"),o=document.querySelector("#date"),c=document.querySelectorAll(".project-priority-button"),s=document.querySelector(".add"),i=document.querySelector(".cancel");let a=[],d="Low";return{addProject:e,displayForm:function(){e.style.display="flex",s.addEventListener("click",(c=>{if(""!=n.value){c.preventDefault();const s=function(e,t,n,r){return{title:e,description:t,date:n,priority:r,tasks:[]}}(n.value,r.value,o.value,d);a.push(s),l.createProjectDiv(),console.log(a),e.style.display="none",d="Low",t.reset()}})),i.addEventListener("click",(n=>{n.preventDefault(),e.style.display="none",t.reset()})),e.addEventListener("click",(t=>{t.target==e&&(e.style.display="none")})),c.forEach((e=>{e.addEventListener("click",(t=>{t.preventDefault(),d=e.textContent,console.log(d)}))}))},myProjectArray:a}}(),u=d,y=document.querySelector(".project-button");document.querySelector(".projects-lists"),y.addEventListener("click",u.displayForm)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,