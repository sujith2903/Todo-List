(()=>{"use strict";function e(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function t(e){return t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},t(e)}function n(n){e(1,arguments);var o=function(n){e(1,arguments);var o=Object.prototype.toString.call(n);return n instanceof Date||"object"===t(n)&&"[object Date]"===o?new Date(n.getTime()):"number"==typeof n||"[object Number]"===o?new Date(n):("string"!=typeof n&&"[object String]"!==o||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}(n);return o.setHours(0,0,0,0),o}function o(t){return e(1,arguments),function(t,o){e(2,arguments);var c=n(t),r=n(o);return c.getTime()===r.getTime()}(t,Date.now())}const c=function(){let e,t,n;const c=document.querySelector(".projects-lists"),r=document.querySelector(".main-content"),a=document.querySelector(".due-content"),l=document.querySelector(".project-title"),i=document.querySelector(".project-description"),d=document.querySelector(".project-due"),u=document.querySelector(".priority"),p=document.querySelector(".task-button"),y=document.querySelector(".all-tasks"),m=document.querySelector(".due-today"),f=(document.querySelector(".due-this-week"),function(e){s.myProjectArray[e]===n&&(r.style.display="none"),s.myProjectArray.splice(e,1)}),k=function(){const e=document.createElement("div");e.classList.add("individual-task"),y.appendChild(e);const t=document.createElement("div");t.classList.add("task-checkbox-div"),e.appendChild(t),t.innerHTML='<label for="task1-checkbox"></label><input type="checkbox" class = "task-checkbox" id="task1-checkbox" name="checkbox">';const n=document.createElement("div");n.classList.add("task-input-div"),e.appendChild(n),n.innerHTML='<label for="task1-input"></label><input type="text" class="task-input" id="task1-input" name="task" required>';const o=document.createElement("div");o.classList.add("task-delete-button"),e.appendChild(o),o.innerHTML='<svg class="deleteSVG" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path class="deleteSVG" d="M19,4H15.5L14.5,3H9.5L8.5,4H5V6H19M6,19A2,2 0 0,0 8,21H16A2,2 0 0,0 18,19V7H6V19Z" /></svg>'},g=function(e,t){return null==t&&(t=!1),{taskName:e,isCompleted:t}};return c.addEventListener("click",(t=>{if(t.target.classList.contains("project")||t.target.classList.contains("deleteSVG")||t.target.classList.contains("editSVG")){let n=t.target.closest(".project-display");e=Array.from(n.parentNode.children).indexOf(n)}})),c.addEventListener("click",(t=>{if(t.target.classList.contains("deleteSVG")){const n=t.target.closest(".project-display");f(e),c.removeChild(n)}})),c.addEventListener("click",(t=>{t.target.classList.contains("project")&&(r.style.display="flex",a.style.display="none",n=s.myProjectArray[e],console.log(n),l.textContent=n.title,i.textContent=n.description,d.textContent=n.date,u.textContent=n.priority,document.querySelectorAll(".individual-task").forEach((e=>{y.removeChild(e)})),function(){for(let e=0;e<n.tasks.length;e++){k();const t=document.querySelectorAll(".task-input"),o=document.querySelectorAll(".task-checkbox");t[e].value=n.tasks[e].taskName,o[e].checked=n.tasks[e].isCompleted}}())})),y.addEventListener("click",(e=>{if(e.target.classList.contains("task-checkbox")||e.target.classList.contains("task-input")||e.target.classList.contains("deleteSVG")){let n=e.target.closest(".individual-task");t=Array.from(n.parentNode.children).indexOf(n)}})),p.addEventListener("click",(()=>{let n,o;k(),y.addEventListener("change",(c=>{if(c.target.classList.contains("task-checkbox")){o=c.target.checked;const r=g(n,o);s.myProjectArray[e].tasks[t]=r}else if(c.target.classList.contains("task-input")){n=c.target.value;const r=g(n,o);s.myProjectArray[e].tasks[t]=r}}))})),y.addEventListener("click",(n=>{if(n.target.classList.contains("deleteSVG")){const o=n.target.closest(".individual-task");s.myProjectArray[e].tasks.splice(t,1),y.removeChild(o)}})),m.addEventListener("click",(()=>{const e=document.querySelector(".due-title");let t=[];r.style.display="none",a.style.display="flex",e.textContent="Due Today";for(let e=0;e<s.myProjectArray.length;e++){let n=new Date(`${s.myProjectArray[e].date}CDT`);o(new Date(n))&&(console.log("test"),t.push(s.myProjectArray[e]))}})),{createProjectDiv:function(){const e=document.createElement("button"),t=document.createElement("button"),n=document.createElement("div"),o=document.createElement("div");n.classList.add("project-display"),c.appendChild(n),o.classList.add("project"),o.textContent=s.myProjectArray[s.myProjectArray.length-1].title,n.appendChild(o),e.classList.add("delete-project-button"),e.innerHTML='<svg class="deleteSVG" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path class="deleteSVG" d="M19,4H15.5L14.5,3H9.5L8.5,4H5V6H19M6,19A2,2 0 0,0 8,21H16A2,2 0 0,0 18,19V7H6V19Z" /></svg>',n.appendChild(e),t.classList.add("edit-project-button"),t.innerHTML='<svg class="editSVG" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path class="editSVG" d="M5,3C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V12H19V19H5V5H12V3H5M17.78,4C17.61,4 17.43,4.07 17.3,4.2L16.08,5.41L18.58,7.91L19.8,6.7C20.06,6.44 20.06,6 19.8,5.75L18.25,4.2C18.12,4.07 17.95,4 17.78,4M15.37,6.12L8,13.5V16H10.5L17.87,8.62L15.37,6.12Z" /></svg>',n.appendChild(t)},deleteProject:f}}(),r=function(){const e=document.querySelector(".add-project"),t=document.querySelector(".add-project-form"),n=document.querySelector("#title"),o=document.querySelector("#description"),r=document.querySelector("#date"),s=document.querySelectorAll(".project-priority-button"),a=document.querySelector(".add"),l=document.querySelector(".cancel");let i=[],d="Low";return{addProject:e,displayForm:function(){e.style.display="flex",a.addEventListener("click",(s=>{if(""!=n.value){s.preventDefault();const a=function(e,t,n,o){return{title:e,description:t,date:n,priority:o,tasks:[]}}(n.value,o.value,r.value,d);i.push(a),c.createProjectDiv(),console.log(i),e.style.display="none",d="Low",t.reset()}})),l.addEventListener("click",(n=>{n.preventDefault(),e.style.display="none",t.reset()})),e.addEventListener("click",(t=>{t.target==e&&(e.style.display="none")})),s.forEach((e=>{e.addEventListener("click",(t=>{t.preventDefault(),d=e.textContent,console.log(d)}))}))},myProjectArray:i}}(),s=r,a=document.querySelector(".project-button");document.querySelector(".projects-lists"),a.addEventListener("click",s.displayForm)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,